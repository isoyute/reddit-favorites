{"version":3,"sources":["components/Header.js","components/Footer.js","components/Layout.js","components/SearchBar.js","components/Post.js","components/Posts.js","components/Content.js","App.js","reducer.js","index.js"],"names":["Header","className","Footer","Layout","children","size","SearchBar","useState","subreddit","setSubreddit","dispatch","useDispatch","value","onChange","e","target","onKeyDown","key","type","isSearching","axios","get","then","res","data","posts","catch","err","console","log","icon","placeholder","width","Post","post","useToasts","setToast","align","span","title","href","url","rel","onClick","newHeartState","isFavorited","id","text","Posts","useSelector","state","length","map","justify","Content","favorites","useEffect","storedFavorites","JSON","parse","localStorage","getItem","initialValue","hideDivider","Item","label","App","initState","updatePostFavoriteStatus","status","storeFavoritesLocally","setItem","stringify","reducer","action","permalink","isStickied","stickied","filter","favorite","store","createStore","ReactDOM","render","StrictMode","themeType","document","getElementById"],"mappings":"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","file":"static/js/main.31d48db9.chunk.js","sourcesContent":["import { Page } from '@geist-ui/react';\n\nconst Header = () => {\n    return (\n        <Page.Header className='header'>\n            <h2>Reddit Favorites</h2>\n        </Page.Header>\n    );\n};\n\nexport default Header;\n","import { Page } from '@geist-ui/react';\nimport '../styles/Footer.css';\n\nconst Footer = () => {\n    return (\n        <Page.Footer className='footer'>\n            <p>Website create by Tudor Lupu</p>\n        </Page.Footer>\n    );\n};\n\nexport default Footer;\n","import { Page } from '@geist-ui/react';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst Layout = ({ children }) => {\n    return (\n        <Page size='large'>\n            <Header />\n            {children}\n            <Footer />\n        </Page>\n    );\n};\n\nexport default Layout;\n","import { useState } from 'react';\nimport { Row, Input } from '@geist-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { Search as SearchIcon } from '@geist-ui/react-icons';\nimport axios from 'axios';\nimport '../styles/SearchBar.css';\n\nconst SearchBar = () => {\n    const [subreddit, setSubreddit] = useState('');\n\n    const dispatch = useDispatch();\n\n    const handleUpdatePosts = (e) => {\n        if (e.key === 'Enter' && subreddit) {\n            // update the state to searching for posts to show spinner\n            dispatch({ type: 'UPDATE_ISSEARCHING', isSearching: true });\n\n            // request the posts, update the posts and remove the spinner\n            axios\n                .get(`https://www.reddit.com/r/${subreddit}/hot.json?limit=10`)\n                .then((res) => res.data)\n                .then((data) => data.data.children)\n                .then((posts) => {\n                    dispatch({ type: 'UPDATE_POSTS', posts });\n                })\n                .then(() =>\n                    dispatch({ type: 'UPDATE_ISSEARCHING', isSearching: false })\n                )\n                .catch((err) => {\n                    console.log(err);\n                    dispatch({\n                        type: 'UPDATE_ISSEARCHING',\n                        isSearching: false,\n                    });\n                });\n        }\n    };\n\n    return (\n        <Row className='search subreddit'>\n            <Input\n                value={subreddit}\n                onChange={(e) => setSubreddit(e.target.value)}\n                onKeyDown={handleUpdatePosts}\n                icon={<SearchIcon />}\n                placeholder=\"subreddit's name\"\n                size='large'\n                width='100%'\n            />\n        </Row>\n    );\n};\n\nexport default SearchBar;\n","import { useDispatch } from 'react-redux';\nimport { Row, Col, Card, useToasts } from '@geist-ui/react';\nimport { Heart, HeartFill } from '@geist-ui/react-icons';\nimport '../styles/Post.css';\n\nconst Post = ({ post }) => {\n    const [, setToast] = useToasts();\n\n    const dispatch = useDispatch();\n\n    const triggerToast = (type, text) =>\n        setToast({\n            text,\n            type,\n        });\n\n    const favoritePost = () => {\n        const newHeartState = !post.isFavorited;\n\n        if (newHeartState) {\n            dispatch({\n                type: 'ADD_FAVORITE',\n                post: {\n                    id: post.id,\n                    title: post.title,\n                    url: post.url,\n                    isFavorited: true,\n                },\n            });\n        } else {\n            dispatch({ type: 'REMOVE_FAVORITE', id: post.id });\n        }\n\n        triggerToast(\n            newHeartState ? 'success' : 'error',\n            newHeartState ? 'Post favorited.' : 'Post unfavorited.'\n        );\n    };\n\n    return (\n        <Row className='search post'>\n            <Card>\n                <Row align='middle'>\n                    <Col span={23}>\n                        <h4>{post.title}</h4>\n                        <a href={post.url} target='_blank' rel='noreferrer'>\n                            <p>{post.url}</p>\n                        </a>\n                    </Col>\n                    <Col span={1}>\n                        <span className='favorite icon' onClick={favoritePost}>\n                            {post.isFavorited ? <HeartFill /> : <Heart />}\n                        </span>\n                    </Col>\n                </Row>\n            </Card>\n        </Row>\n    );\n};\n\nexport default Post;\n","import { useSelector } from 'react-redux';\nimport { Row, Spinner } from '@geist-ui/react';\nimport Post from './Post';\nimport '../styles/Posts.css';\n\nconst Posts = ({ posts, type }) => {\n    const isSearching = useSelector((state) => state.isSearching);\n\n    return (\n        <div className='search posts'>\n            {isSearching ? (\n                <Spinner size='large' />\n            ) : posts && posts.length > 0 ? (\n                <>\n                    {!type && <p>{posts.length} posts found ...</p>}\n                    {posts.map((post) => (\n                        <Post key={post.id} post={post} />\n                    ))}\n                </>\n            ) : (\n                <Row className='search not-found' justify='center'>\n                    nothing to see here.\n                </Row>\n            )}\n        </div>\n    );\n};\n\nexport default Posts;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Page, Tabs } from '@geist-ui/react';\nimport SearchBar from './SearchBar';\nimport Posts from './Posts';\n\nconst Content = () => {\n    const posts = useSelector((state) => state.posts);\n    const favorites = useSelector((state) => state.favorites);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (favorites && favorites.length === 0) {\n            const storedFavorites = JSON.parse(\n                localStorage.getItem('favorites')\n            );\n\n            if (storedFavorites && storedFavorites.length > 0) {\n                dispatch({ type: 'UPDATE_FAVORITES', posts: storedFavorites });\n            }\n        }\n    }, [favorites, dispatch]);\n\n    return (\n        <Page.Content className='content'>\n            <Tabs initialValue='search' hideDivider>\n                <Tabs.Item label='Search' value='search'>\n                    <SearchBar />\n                    <Posts posts={posts} />\n                </Tabs.Item>\n                <Tabs.Item label='Favorites' value='favorites'>\n                    <Posts posts={favorites} type='favorites' />\n                </Tabs.Item>\n            </Tabs>\n        </Page.Content>\n    );\n};\n\nexport default Content;\n","import Layout from './components/Layout';\nimport Content from './components/Content';\n\nconst App = () => {\n    return (\n        <div className='app'>\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","const initState = {\n    posts: [],\n    favorites: [],\n    isSearching: false,\n};\n\nconst updatePostFavoriteStatus = (posts, id, status) => {\n    return [...posts].map((post) => {\n        if (post.id === id) {\n            post.isFavorited = status;\n        }\n\n        return post;\n    });\n};\n\nconst storeFavoritesLocally = (favorites) => {\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n    return favorites;\n};\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'UPDATE_POSTS':\n            const posts = action.posts\n                .map((post) => ({\n                    id: post.data.id,\n                    title: post.data.title,\n                    url: `https://www.reddit.com${post.data.permalink}`,\n                    isStickied: post.data.stickied,\n                    isFavorited: false,\n                }))\n                .filter((post) => !post.isStickied);\n\n            return {\n                ...state,\n                posts: posts.map((post) => {\n                    for (const favorite of state.favorites) {\n                        if (post.id === favorite.id) {\n                            post.isFavorited = true;\n                            break;\n                        }\n                    }\n\n                    return post;\n                }),\n            };\n        case 'UPDATE_FAVORITES':\n            return {\n                ...state,\n                favorites: action.posts,\n            };\n        case 'ADD_FAVORITE':\n            return {\n                posts: updatePostFavoriteStatus(\n                    state.posts,\n                    action.post.id,\n                    true\n                ),\n                favorites: storeFavoritesLocally([\n                    ...state.favorites,\n                    action.post,\n                ]),\n                isSearching: state.isSearching,\n            };\n        case 'REMOVE_FAVORITE':\n            return {\n                posts: updatePostFavoriteStatus(state.posts, action.id, false),\n                favorites: storeFavoritesLocally(\n                    [...state.favorites].filter((post) => post.id !== action.id)\n                ),\n                isSearching: state.isSearching,\n            };\n        case 'UPDATE_ISSEARCHING':\n            return {\n                ...state,\n                isSearching: action.isSearching,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { GeistProvider, CssBaseline } from '@geist-ui/react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <React.StrictMode>\n        <GeistProvider themeType='dark'>\n            <CssBaseline />\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </GeistProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}